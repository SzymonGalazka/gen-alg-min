[{"/Users/szymongalazka/development/sg/lfsr/src/App.js":"1","/Users/szymongalazka/development/sg/lfsr/src/reportWebVitals.js":"2","/Users/szymongalazka/development/sg/lfsr/src/index.js":"3","/Users/szymongalazka/development/sg/lfsr/src/Components/Main.js":"4","/Users/szymongalazka/development/sg/lfsr/src/Components/solveCycle.js":"5","/Users/szymongalazka/development/sg/lfsr/src/Components/Helpers.js":"6","/Users/szymongalazka/development/sg/gen-alg-min/src/Components/Main.js":"7","/Users/szymongalazka/development/sg/gen-alg-min/src/Components/Helpers.js":"8","/Users/szymongalazka/development/sg/gen-alg-min/src/App.js":"9","/Users/szymongalazka/development/sg/gen-alg-min/src/reportWebVitals.js":"10","/Users/szymongalazka/development/sg/gen-alg-min/src/index.js":"11","/Users/szymongalazka/development/sg/gen-alg-min/src/Components/mcCormickGA.js":"12","/Users/szymongalazka/development/sg/gen-alg-min/src/Components/eggGA.js":"13","/Users/szymongalazka/development/sg/gen-alg-min/src/Components/michalewiczGA.js":"14","/Users/szymongalazka/development/sg/gen-alg-min/src/Components/bohachevskyGA.js":"15"},{"size":470,"mtime":1606580246727,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1606578209815,"results":"18","hashOfConfig":"17"},{"size":500,"mtime":1606578209815,"results":"19","hashOfConfig":"17"},{"size":4333,"mtime":1606681138111,"results":"20","hashOfConfig":"17"},{"size":652,"mtime":1606675185783,"results":"21","hashOfConfig":"17"},{"size":1207,"mtime":1606672718424,"results":"22","hashOfConfig":"17"},{"size":10907,"mtime":1607466386008,"results":"23","hashOfConfig":"24"},{"size":1587,"mtime":1607465058266,"results":"25","hashOfConfig":"24"},{"size":477,"mtime":1607257458258,"results":"26","hashOfConfig":"24"},{"size":362,"mtime":1606578209815,"results":"27","hashOfConfig":"24"},{"size":500,"mtime":1606578209815,"results":"28","hashOfConfig":"24"},{"size":1599,"mtime":1607463435896,"results":"29","hashOfConfig":"30"},{"size":1585,"mtime":1607463417977,"results":"31","hashOfConfig":"24"},{"size":1615,"mtime":1607463575293,"results":"32","hashOfConfig":"24"},{"size":1700,"mtime":1607465040713,"results":"33","hashOfConfig":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zga5s7",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},"adwlxn",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1ob6qpj",{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/szymongalazka/development/sg/lfsr/src/App.js",[],"/Users/szymongalazka/development/sg/lfsr/src/reportWebVitals.js",[],"/Users/szymongalazka/development/sg/lfsr/src/index.js",[],"/Users/szymongalazka/development/sg/lfsr/src/Components/Main.js",["65"],"/Users/szymongalazka/development/sg/lfsr/src/Components/solveCycle.js",[],"/Users/szymongalazka/development/sg/lfsr/src/Components/Helpers.js",[],"/Users/szymongalazka/development/sg/gen-alg-min/src/Components/Main.js",["66"],"import React, { useState } from 'react';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport './Main.css';\nimport mcCormickGA from './mcCormickGA';\nimport eggGA from './eggGA';\nimport michalewiczGA from './michalewiczGA';\nimport bochachevskyGA from './bohachevskyGA';\nimport Plotly from 'plotly.js-basic-dist';\n\nimport createPlotlyComponent from 'react-plotly.js/factory';\nconst Plot = createPlotlyComponent(Plotly);\n\nconst Main = () => {\n  const [fun, setFun] = useState('mcCormick');\n  const [cormickX, setCormickX] = useState([-1.5, 4]);\n  const [cormickY, setCormickY] = useState([-3, 4]);\n  const [eggX, setEggX] = useState([-5, 5]);\n  const [eggY, setEggY] = useState([-5, 5]);\n  const [michalewiczX, setMichalewiczX] = useState([0, Math.PI]);\n  const [michalewiczY, setMichalewiczY] = useState([0, Math.PI]);\n  const [easomX, setEasomX] = useState([-100, 100]);\n  const [easomY, setEasomY] = useState([-100, 100]);\n  const [bohachevskyX, setBohachevskyX] = useState([-100, 100]);\n  const [bohachevskyY, setBohachevskyY] = useState([-100, 100]);\n  const [settings, setSettings] = useState({\n    mutationRate: 0.3,\n    popSize: 100,\n    numParents: 2,\n    maxGenerations: 100,\n    elitism: true,\n  });\n  const options = [\n    'mcCormick',\n    'eggCrate',\n    'michalewicz',\n    'easom',\n    'bohachevsky',\n  ];\n\n  const runAlgorithm = () => {\n    document.querySelector('#metadata').innerHTML = '[Results]';\n    if (fun === options[0])\n      mcCormickGA(-1.9133, mcCormick, cormickX, cormickY, settings);\n    if (fun === options[1]) eggGA(0.0, eggCrate, eggX, eggY, settings);\n    if (fun === options[2])\n      michalewiczGA(-1.8013, michalewicz, michalewiczX, michalewiczY, settings);\n    if (fun === options[3]) mcCormickGA(-1, easom, easomX, easomY, settings);\n    if (fun === options[4])\n      bochachevskyGA(0.0, bohachevsky, bohachevskyX, bohachevskyY, settings);\n  };\n  const mcCormick = (x, y) =>\n    Math.sin(x + y) + (x - y) * (x - y) + 1.0 + 2.5 * y - 1.5 * x;\n\n  const eggCrate = (x, y) =>\n    x * x +\n    y * y +\n    25 * (Math.sin(x) * Math.sin(x) + Math.sin(y) * Math.sin(y));\n\n  const michalewicz = (x, y, m) => {\n    let val = 0.0;\n    const first = Math.sin((x * x) / Math.PI);\n    val += Math.sin(x) * Math.pow(first, 2.0 * m);\n    const second = Math.sin((2 * y * y) / Math.PI);\n    val += Math.sin(y) * Math.pow(second, 2.0 * m);\n    return -val;\n  };\n\n  const easom = (x, y) =>\n    -Math.cos(x) *\n    Math.cos(y) *\n    Math.exp(-Math.pow(x - Math.PI, 2) - Math.pow(y - Math.PI, 2));\n\n  const bohachevsky = (x, y) =>\n    Math.pow(x, 2) +\n    2 * Math.pow(y, 2) -\n    0.3 * Math.cos(3 * Math.PI * x) -\n    0.4 * Math.cos(4 * Math.PI * y) +\n    0.7;\n\n  return (\n    <div className='main'>\n      <div className='row'>\n        <h2>Select function</h2>\n        <Dropdown\n          options={options}\n          onChange={(option) => {\n            document.querySelector('#metadata').innerHTML = '[Results]';\n            document.querySelector('#results').innerHTML = '';\n            setFun(option.value);\n          }}\n          value={fun}\n          placeholder='Select function'\n        />\n      </div>\n      <div className='row'>\n        <h3>Domain</h3>\n        {fun === 'mcCormick' && (\n          <>\n            <label>\n              x1\n              <input\n                type='number'\n                value={cormickX[0]}\n                onChange={(e) => setCormickX([e.target.value, cormickX[1]])}\n              />\n              <input\n                type='number'\n                value={cormickX[1]}\n                onChange={(e) => setCormickX([cormickX[0], e.target.value])}\n              />\n            </label>\n            <label>\n              x2\n              <input\n                type='number'\n                value={cormickY[0]}\n                onChange={(e) => setCormickY([e.target.value, cormickY[0]])}\n              />\n              <input\n                type='number'\n                value={cormickY[1]}\n                onChange={(e) => setCormickY([cormickY[0], e.target.value])}\n              />\n            </label>\n            <h5>\n              Ideal fitness = <b>1</b>\n            </h5>\n          </>\n        )}\n        {fun === 'eggCrate' && (\n          <>\n            <label>\n              x1\n              <input\n                type='number'\n                value={eggX[0]}\n                onChange={(e) => setEggX([e.target.value, eggX[1]])}\n              />\n              <input\n                type='number'\n                value={eggX[1]}\n                onChange={(e) => setEggX([eggX[0], e.target.value])}\n              />\n            </label>\n            <label>\n              x2\n              <input\n                type='number'\n                value={eggY[0]}\n                onChange={(e) => setEggY([e.target.value, eggY[0]])}\n              />\n              <input\n                type='number'\n                value={eggY[1]}\n                onChange={(e) => setEggY([eggY[0], e.target.value])}\n              />\n            </label>\n            <h5>\n              Ideal fitness = <b>highest</b>\n            </h5>\n          </>\n        )}\n        {fun === 'michalewicz' && (\n          <>\n            <label>\n              x1\n              <input\n                type='number'\n                value={michalewiczX[0]}\n                onChange={(e) =>\n                  setMichalewiczX([e.target.value, michalewiczX[1]])\n                }\n              />\n              <input\n                type='number'\n                value={michalewiczX[1]}\n                onChange={(e) =>\n                  setMichalewiczX([michalewiczX[0], e.target.value])\n                }\n              />\n            </label>\n            <label>\n              x2\n              <input\n                type='number'\n                value={michalewiczY[0]}\n                onChange={(e) =>\n                  setMichalewiczY([e.target.value, michalewiczY[0]])\n                }\n              />\n              <input\n                type='number'\n                value={michalewiczY[1]}\n                onChange={(e) =>\n                  setMichalewiczY([michalewiczY[0], e.target.value])\n                }\n              />\n            </label>\n            <h5>\n              Ideal fitness = <b>1</b>\n            </h5>\n          </>\n        )}\n        {fun === 'easom' && (\n          <>\n            <label>\n              x1\n              <input\n                type='number'\n                value={easomX[0]}\n                onChange={(e) => setEasomX([e.target.value, easomX[1]])}\n              />\n              <input\n                type='number'\n                value={easomX[1]}\n                onChange={(e) => setEasomX([easomX[0], e.target.value])}\n              />\n            </label>\n            <label>\n              x2\n              <input\n                type='number'\n                value={easomY[0]}\n                onChange={(e) => setEasomY([e.target.value, easomY[0]])}\n              />\n              <input\n                type='number'\n                value={easomY[1]}\n                onChange={(e) => setEasomY([easomY[0], e.target.value])}\n              />\n            </label>\n            <h5>\n              Ideal fitness = <b>1</b>\n            </h5>\n          </>\n        )}\n        {fun === 'bohachevsky' && (\n          <>\n            <label>\n              x1\n              <input\n                type='number'\n                value={easomX[0]}\n                onChange={(e) =>\n                  setBohachevskyX([e.target.value, bohachevskyX[1]])\n                }\n              />\n              <input\n                type='number'\n                value={bohachevskyX[1]}\n                onChange={(e) =>\n                  setBohachevskyX([bohachevskyX[0], e.target.value])\n                }\n              />\n            </label>\n            <label>\n              x2\n              <input\n                type='number'\n                value={bohachevskyY[0]}\n                onChange={(e) =>\n                  setBohachevskyY([e.target.value, bohachevskyY[0]])\n                }\n              />\n              <input\n                type='number'\n                value={bohachevskyY[1]}\n                onChange={(e) =>\n                  setBohachevskyY([bohachevskyY[0], e.target.value])\n                }\n              />\n            </label>\n            <h5>\n              Ideal fitness = <b>highest</b>\n            </h5>\n          </>\n        )}\n      </div>\n      <div className='config'>\n        <div className='metadata'>\n          <div className='metadata-best' id='metadata'>\n            [Results]\n          </div>\n          <div className='metadata-plot' id='plot'>\n            <Plotly\n              data={[\n                {\n                  x: [1, 2, 3],\n                  y: [2, 6, 3],\n                  type: 'scatter',\n                  mode: 'lines+markers',\n                  marker: { color: 'red' },\n                },\n                { type: 'bar', x: [1, 2, 3], y: [2, 5, 3] },\n              ]}\n              layout={{ width: 320, height: 240, title: 'A Fancy Plot' }}\n            />\n          </div>\n        </div>\n        <div className='settings'>\n          <label>\n            Mutation rate\n            <input\n              type='number'\n              value={settings.mutationRate}\n              onChange={(e) =>\n                setSettings({ ...settings, mutationRate: e.target.value })\n              }\n            />\n          </label>\n          <label>\n            Population size\n            <input\n              type='number'\n              value={settings.popSize}\n              onChange={(e) =>\n                setSettings({ ...settings, popSize: e.target.value })\n              }\n            />\n          </label>\n          <label>\n            Number of parents\n            <input\n              type='number'\n              value={settings.numParents}\n              onChange={(e) =>\n                setSettings({ ...settings, numParents: e.target.value })\n              }\n            />\n          </label>\n          <label>\n            Max generations\n            <input\n              type='number'\n              value={settings.maxGenerations}\n              onChange={(e) =>\n                setSettings({ ...settings, maxGenerations: e.target.value })\n              }\n            />\n          </label>\n          <label>\n            Elitism\n            <input\n              type='checkbox'\n              checked={settings.elitism}\n              value={settings.elitism}\n              name='elitism'\n              onChange={(e) =>\n                setSettings({ ...settings, elitism: !settings.elitism })\n              }\n            />\n          </label>\n        </div>\n      </div>\n      <div className='row'>\n        <button onClick={() => runAlgorithm()}>Run algorithm</button>\n      </div>\n      <ul className='results' id='results'></ul>\n    </div>\n  );\n};\n\nexport default Main;\n","/Users/szymongalazka/development/sg/gen-alg-min/src/Components/Helpers.js",[],"/Users/szymongalazka/development/sg/gen-alg-min/src/App.js",[],"/Users/szymongalazka/development/sg/gen-alg-min/src/reportWebVitals.js",[],"/Users/szymongalazka/development/sg/gen-alg-min/src/index.js",[],"/Users/szymongalazka/development/sg/gen-alg-min/src/Components/mcCormickGA.js",["67","68","69"],"/Users/szymongalazka/development/sg/gen-alg-min/src/Components/eggGA.js",["70","71","72"],"/Users/szymongalazka/development/sg/gen-alg-min/src/Components/michalewiczGA.js",["73","74","75"],"/Users/szymongalazka/development/sg/gen-alg-min/src/Components/bohachevskyGA.js",["76","77","78"],{"ruleId":"79","severity":1,"message":"80","line":18,"column":6,"nodeType":"81","endLine":18,"endColumn":8,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":12,"column":7,"nodeType":"85","messageId":"86","endLine":12,"endColumn":11},{"ruleId":"83","severity":1,"message":"87","line":2,"column":3,"nodeType":"85","messageId":"86","endLine":2,"endColumn":8},{"ruleId":"83","severity":1,"message":"88","line":3,"column":3,"nodeType":"85","messageId":"86","endLine":3,"endColumn":17},{"ruleId":"83","severity":1,"message":"89","line":4,"column":3,"nodeType":"85","messageId":"86","endLine":4,"endColumn":19},{"ruleId":"83","severity":1,"message":"87","line":1,"column":10,"nodeType":"85","messageId":"86","endLine":1,"endColumn":15},{"ruleId":"83","severity":1,"message":"88","line":1,"column":17,"nodeType":"85","messageId":"86","endLine":1,"endColumn":31},{"ruleId":"83","severity":1,"message":"89","line":1,"column":33,"nodeType":"85","messageId":"86","endLine":1,"endColumn":49},{"ruleId":"83","severity":1,"message":"87","line":2,"column":3,"nodeType":"85","messageId":"86","endLine":2,"endColumn":8},{"ruleId":"83","severity":1,"message":"88","line":3,"column":3,"nodeType":"85","messageId":"86","endLine":3,"endColumn":17},{"ruleId":"83","severity":1,"message":"89","line":4,"column":3,"nodeType":"85","messageId":"86","endLine":4,"endColumn":19},{"ruleId":"83","severity":1,"message":"87","line":2,"column":3,"nodeType":"85","messageId":"86","endLine":2,"endColumn":8},{"ruleId":"83","severity":1,"message":"88","line":3,"column":3,"nodeType":"85","messageId":"86","endLine":3,"endColumn":17},{"ruleId":"83","severity":1,"message":"89","line":4,"column":3,"nodeType":"85","messageId":"86","endLine":4,"endColumn":19},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'computeWithGA'. Either include it or remove the dependency array.","ArrayExpression",["90"],"no-unused-vars","'Plot' is assigned a value but never used.","Identifier","unusedVar","'round' is defined but never used.","'createBestItem' is defined but never used.","'createResultItem' is defined but never used.",{"desc":"91","fix":"92"},"Update the dependencies array to be: [computeWithGA]",{"range":"93","text":"94"},[429,431],"[computeWithGA]"]