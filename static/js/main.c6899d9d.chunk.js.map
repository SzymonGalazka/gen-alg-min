{"version":3,"sources":["Components/Helpers.js","Components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["round","num","Math","Number","EPSILON","genie","require","Simulation","Individual","Chromosome","Main","useState","fun","setFun","cormickX1","setCormickX1","cormickX2","setCormickX2","options","mcCormick","x1","x2","sin","createResultItem","name","li","document","createElement","textContent","style","random","computeWithGA","target","testedFun","x1boundary","x2boundary","querySelector","innerHTML","GlobalMinFinder","individual","data","getDna","top","fitness","generate","min","max","parseInt","prototype","mutationRate","popSize","numParents","maxGenerations","elitism","selection","ga","Selection","rouletteWheel","crossover","Crossover","multipoint","onCalculateFitness","state","console","log","appendChild","currentGeneration","join","start","className","onChange","option","value","placeholder","type","e","onClick","id","App","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c6899d9d.chunk.js","sourcesContent":["export const getRandomInt = (max) =>\n  Math.floor(Math.random() * Math.floor(max));\n\nexport const getRandomArbitrary = (min, max) =>\n  Math.random() * (max - min) + min;\n\nexport const getColor = () =>\n  'hsl(' +\n  360 * Math.random() +\n  ',' +\n  (25 + 70 * Math.random()) +\n  '%,' +\n  (85 + 10 * Math.random()) +\n  '%)';\n\nexport const round = (num) =>\n  Math.round((num + Number.EPSILON) * 10000) / 10000;\n","import React, { useState, useEffect } from 'react';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport './Main.css';\nimport { getColor, round } from './Helpers';\nconst genie = require('@adrianperea/genie.js');\nconst { Simulation, Individual, Chromosome } = genie;\n\nconst Main = () => {\n  const [fun, setFun] = useState('mcCormick');\n  const [cormickX1, setCormickX1] = useState([-1.5, 4]);\n  const [cormickX2, setCormickX2] = useState([-3, 4]);\n  const options = ['mcCormick', 'two', 'three'];\n\n  const runAlgorithm = () => {\n    if (fun === options[0])\n      computeWithGA(-1.9133, mcCormick, cormickX1, cormickX2);\n  };\n\n  const mcCormick = (x1, x2) =>\n    Math.sin(x1 + x2) + (x1 - x2) * (x1 - x2) + 1.0 + 2.5 * x2 - 1.5 * x1;\n\n  const createResultItem = (name) => {\n    let li = document.createElement('li');\n    li.textContent = name;\n    li.style = `background-color: ${getColor()}`;\n    return li;\n  };\n\n  const computeWithGA = (target, testedFun, x1boundary, x2boundary) => {\n    document.querySelector('#results').innerHTML = '';\n    class GlobalMinFinder extends Simulation {\n      calculateFitness(individual, data) {\n        const fitness = data.testedFun(\n          individual.getDna(0)[0],\n          individual.getDna(1)[0]\n        );\n        return fitness / data.target;\n      }\n\n      shouldFinish(top) {\n        return top.fitness === 1;\n      }\n    }\n    const generate = (min, max) => {\n      const x = Math.random() * (max - min) + min;\n      return x;\n    };\n\n    const x1 = new Chromosome(1, () =>\n      generate(parseInt(x1boundary[0]), parseInt(x1boundary[1]))\n    );\n    const x2 = new Chromosome(1, () =>\n      generate(parseInt(x2boundary[0]), parseInt(x2boundary[1]))\n    );\n    const individual = new Individual([x1, x2]);\n    const config = {\n      prototype: individual,\n      data: { target, testedFun },\n      mutationRate: 0.3,\n      popSize: 100,\n      numParents: 2,\n      maxGenerations: 100,\n      elitism: true,\n      selection: genie.ga.Selection.rouletteWheel,\n      crossover: genie.ga.Crossover.multipoint,\n      onCalculateFitness(state) {\n        console.log(state);\n        document.querySelector('#results').appendChild(\n          createResultItem(\n            `Gen ${state.currentGeneration},\\n Best Fitness: ${\n              state.top.fitness\n            }, \\n\n              [${round(state.top.getDna(0)[0])},${round(\n              state.top.getDna(1)[0]\n            )}]`\n          )\n        );\n        console.log(\n          'Best fitness: ' + state.top.fitness,\n          state.top.getDna(0).join(''),\n          state.top.getDna(1).join('')\n        );\n      },\n    };\n\n    const sim = new GlobalMinFinder(config);\n    sim.start();\n  };\n\n  return (\n    <div className='main'>\n      <div className='row'>\n        {console.log(cormickX1)}\n        <h2>Select function</h2>\n        <Dropdown\n          options={options}\n          onChange={(option) => setFun(option.value)}\n          value={fun}\n          placeholder='Select function'\n        />\n      </div>\n      <div className='row'>\n        <h3>Domain</h3>\n        {fun === 'mcCormick' && (\n          <>\n            <label>\n              x1\n              <input\n                type='number'\n                value={cormickX1[0]}\n                onChange={(e) => setCormickX1([e.target.value, cormickX1[1]])}\n              />\n              <input\n                type='number'\n                value={cormickX1[1]}\n                onChange={(e) => setCormickX1([cormickX1[0], e.target.value])}\n              />\n            </label>\n            <label>\n              x2\n              <input\n                type='number'\n                value={cormickX2[0]}\n                onChange={(e) => setCormickX2([e.target.value, cormickX2[0]])}\n              />\n              <input\n                type='number'\n                value={cormickX2[1]}\n                onChange={(e) => setCormickX2([cormickX2[0], e.target.value])}\n              />\n            </label>\n          </>\n        )}\n      </div>\n      <div className='row'>\n        <button onClick={() => runAlgorithm()}>Run algorithm</button>\n      </div>\n      <ul className='results' id='results'></ul>\n    </div>\n  );\n};\n\nexport default Main;\n","import './App.css';\nimport Main from './Components/Main';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Main />\n      <footer className='App-footer'>\n        <span>Szymon Galazka 2020</span>\n        <a\n          className='App-link'\n          href='https://github.com/SzymonGalazka/gen-alg-min'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          Repository link\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}