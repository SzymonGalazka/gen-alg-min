{"version":3,"sources":["Components/Helpers.js","Components/mcCormickGA.js","Components/eggGA.js","Components/michalewiczGA.js","Components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["getColor","Math","random","round","num","Number","EPSILON","genie","require","Simulation","Individual","Chromosome","mcCormickGA","target","testedFun","x1boundary","x2boundary","settings","document","querySelector","innerHTML","GlobalMinFinder","individual","data","getDna","top","fitness","generate","min","max","x1","parseFloat","x2","prototype","mutationRate","popSize","numParents","maxGenerations","elitism","selection","ga","Selection","rouletteWheel","crossover","Crossover","multipoint","onCalculateFitness","state","console","log","appendChild","name","li","createElement","textContent","style","createResultItem","currentGeneration","join","start","eggGA","optimizer","Optimizer","maximizer","singlePoint","michalewiczGA","Main","useState","fun","setFun","cormickX","setCormickX","cormickY","setCormickY","eggX","setEggX","eggY","setEggY","PI","michalewiczX","setMichalewiczX","michalewiczY","setMichalewiczY","setSettings","options","mcCormick","x","y","sin","eggCrate","michalewicz","m","val","first","pow","second","className","onChange","option","value","placeholder","type","e","checked","onClick","id","App","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5ec4c671.chunk.js","sourcesContent":["export const getRandomInt = (max) =>\n  Math.floor(Math.random() * Math.floor(max));\n\nexport const getRandomArbitrary = (min, max) =>\n  Math.random() * (max - min) + min;\n\nexport const getColor = () =>\n  'hsl(' +\n  360 * Math.random() +\n  ',' +\n  (25 + 70 * Math.random()) +\n  '%,' +\n  (85 + 10 * Math.random()) +\n  '%)';\n\nexport const round = (num) =>\n  Math.round((num + Number.EPSILON) * 10000) / 10000;\n","import { round, getColor } from './Helpers';\nconst genie = require('@adrianperea/genie.js');\nconst { Simulation, Individual, Chromosome } = genie;\n\nconst createResultItem = (name) => {\n  let li = document.createElement('li');\n  li.textContent = name;\n  li.style = `background-color: ${getColor()}`;\n  return li;\n};\n\nconst mcCormickGA = (target, testedFun, x1boundary, x2boundary, settings) => {\n  document.querySelector('#results').innerHTML = '';\n  class GlobalMinFinder extends Simulation {\n    calculateFitness(individual, data) {\n      const fitness = data.testedFun(\n        individual.getDna(0)[0],\n        individual.getDna(1)[0]\n      );\n      return fitness / data.target;\n    }\n\n    shouldFinish(top) {\n      return top.fitness >= 0.9999 && top.fitness <= 1.0001;\n    }\n  }\n  const generate = (min, max) => {\n    const x = Math.random() * (max - min) + min;\n    return x;\n  };\n\n  const x1 = new Chromosome(1, () =>\n    generate(parseFloat(x1boundary[0]), parseFloat(x1boundary[1]))\n  );\n  const x2 = new Chromosome(1, () =>\n    generate(parseFloat(x2boundary[0]), parseFloat(x2boundary[1]))\n  );\n  const individual = new Individual([x1, x2]);\n  const config = {\n    prototype: individual,\n    data: { target, testedFun },\n    mutationRate: parseFloat(settings.mutationRate),\n    popSize: parseFloat(settings.popSize),\n    numParents: parseFloat(settings.numParents),\n    maxGenerations: parseFloat(settings.maxGenerations),\n    elitism: settings.elitism,\n    selection: genie.ga.Selection.rouletteWheel,\n    crossover: genie.ga.Crossover.multipoint,\n    onCalculateFitness(state) {\n      console.log(state);\n      document.querySelector('#results').appendChild(\n        createResultItem(\n          `Gen ${state.currentGeneration}, Best fitness: ${\n            state.top.fitness\n          }, \\n\n              [${round(state.top.getDna(0)[0])},${round(\n            state.top.getDna(1)[0]\n          )}]`\n        )\n      );\n      console.log(\n        'Best fitness: ' + state.top.fitness,\n        state.top.getDna(0).join(''),\n        state.top.getDna(1).join('')\n      );\n    },\n  };\n\n  const sim = new GlobalMinFinder(config);\n  sim.start();\n};\n\nexport default mcCormickGA;\n","import { round, getColor } from './Helpers';\nconst genie = require('@adrianperea/genie.js');\nconst { Simulation, Individual, Chromosome } = genie;\n\nconst createResultItem = (name) => {\n  let li = document.createElement('li');\n  li.textContent = name;\n  li.style = `background-color: ${getColor()}`;\n  return li;\n};\n\nconst eggGA = (target, testedFun, x1boundary, x2boundary, settings) => {\n  document.querySelector('#results').innerHTML = '';\n  class GlobalMinFinder extends Simulation {\n    calculateFitness(individual, data) {\n      const fitness = data.testedFun(\n        individual.getDna(0)[0],\n        individual.getDna(1)[0]\n      );\n      return 1 / fitness;\n    }\n\n    shouldFinish(top) {\n      return top.fitness === 1;\n    }\n  }\n  const generate = (min, max) => {\n    const x = Math.random() * (max - min) + min;\n    return x;\n  };\n\n  const x1 = new Chromosome(1, () =>\n    generate(parseFloat(x1boundary[0]), parseFloat(x1boundary[1]))\n  );\n  const x2 = new Chromosome(1, () =>\n    generate(parseFloat(x2boundary[0]), parseFloat(x2boundary[1]))\n  );\n  const individual = new Individual([x1, x2]);\n  const config = {\n    prototype: individual,\n    data: { target, testedFun },\n    mutationRate: parseFloat(settings.mutationRate),\n    popSize: parseFloat(settings.popSize),\n    numParents: parseFloat(settings.numParents),\n    maxGenerations: parseFloat(settings.maxGenerations),\n    elitism: settings.elitism,\n    optimizer: genie.ga.Optimizer.maximizer,\n    selection: genie.ga.Selection.rouletteWheel,\n    crossover: genie.ga.Crossover.singlePoint,\n    onCalculateFitness(state) {\n      console.log(state);\n      document.querySelector('#results').appendChild(\n        createResultItem(\n          `Gen ${state.currentGeneration}, Best fitness: ${\n            state.top.fitness\n          }, \\n\n              [${round(state.top.getDna(0)[0])},${round(\n            state.top.getDna(1)[0]\n          )}]`\n        )\n      );\n      console.log(\n        'Best fitness: ' + state.top.fitness,\n        state.top.getDna(0).join(''),\n        state.top.getDna(1).join('')\n      );\n    },\n  };\n\n  const sim = new GlobalMinFinder(config);\n  sim.start();\n};\n\nexport default eggGA;\n","import { round, getColor } from './Helpers';\nconst genie = require('@adrianperea/genie.js');\nconst { Simulation, Individual, Chromosome } = genie;\n\nconst createResultItem = (name) => {\n  let li = document.createElement('li');\n  li.textContent = name;\n  li.style = `background-color: ${getColor()}`;\n  return li;\n};\n\nconst michalewiczGA = (target, testedFun, x1boundary, x2boundary, settings) => {\n  document.querySelector('#results').innerHTML = '';\n  class GlobalMinFinder extends Simulation {\n    calculateFitness(individual, data) {\n      const fitness = data.testedFun(\n        individual.getDna(0)[0],\n        individual.getDna(1)[0],\n        10\n      );\n      return fitness / data.target;\n    }\n\n    shouldFinish(top) {\n      return top.fitness >= 0.9999 && top.fitness <= 1.0001;\n    }\n  }\n  const generate = (min, max) => {\n    const x = Math.random() * (max - min) + min;\n    return x;\n  };\n\n  const x1 = new Chromosome(1, () =>\n    generate(parseFloat(x1boundary[0]), parseFloat(x1boundary[1]))\n  );\n  const x2 = new Chromosome(1, () =>\n    generate(parseFloat(x2boundary[0]), parseFloat(x2boundary[1]))\n  );\n  const individual = new Individual([x1, x2]);\n  const config = {\n    prototype: individual,\n    data: { target, testedFun },\n    mutationRate: parseFloat(settings.mutationRate),\n    popSize: parseFloat(settings.popSize),\n    numParents: parseFloat(settings.numParents),\n    maxGenerations: parseFloat(settings.maxGenerations),\n    elitism: settings.elitism,\n    selection: genie.ga.Selection.rouletteWheel,\n    crossover: genie.ga.Crossover.multipoint,\n    onCalculateFitness(state) {\n      console.log(state);\n      document.querySelector('#results').appendChild(\n        createResultItem(\n          `Gen ${state.currentGeneration}, Best fitness: ${\n            state.top.fitness\n          }, \\n\n              [${round(state.top.getDna(0)[0])},${round(\n            state.top.getDna(1)[0]\n          )}]`\n        )\n      );\n      console.log(\n        'Best fitness: ' + state.top.fitness,\n        state.top.getDna(0).join(''),\n        state.top.getDna(1).join('')\n      );\n    },\n  };\n\n  const sim = new GlobalMinFinder(config);\n  sim.start();\n};\n\nexport default michalewiczGA;\n","import React, { useState } from 'react';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport './Main.css';\nimport mcCormickGA from './mcCormickGA';\nimport eggGA from './eggGA';\nimport michalewiczGA from './michalewiczGA';\n\nconst Main = () => {\n  const [fun, setFun] = useState('mcCormick');\n  const [cormickX, setCormickX] = useState([-1.5, 4]);\n  const [cormickY, setCormickY] = useState([-3, 4]);\n  const [eggX, setEggX] = useState([-5, 5]);\n  const [eggY, setEggY] = useState([-5, 5]);\n  const [michalewiczX, setMichalewiczX] = useState([0, Math.PI]);\n  const [michalewiczY, setMichalewiczY] = useState([0, Math.PI]);\n  const [settings, setSettings] = useState({\n    mutationRate: 0.3,\n    popSize: 100,\n    numParents: 2,\n    maxGenerations: 100,\n    elitism: true,\n  });\n  const options = ['mcCormick', 'eggCrate', 'michalewicz'];\n\n  const runAlgorithm = () => {\n    if (fun === options[0])\n      mcCormickGA(-1.9133, mcCormick, cormickX, cormickY, settings);\n    if (fun === options[1]) eggGA(0.0, eggCrate, eggX, eggY, settings);\n    if (fun === options[2])\n      michalewiczGA(-1.8013, michalewicz, michalewiczX, michalewiczY, settings);\n  };\n  const mcCormick = (x, y) =>\n    Math.sin(x + y) + (x - y) * (x - y) + 1.0 + 2.5 * y - 1.5 * x;\n\n  const eggCrate = (x, y) =>\n    x * x +\n    y * y +\n    25 * (Math.sin(x) * Math.sin(x) + Math.sin(y) * Math.sin(y));\n\n  const michalewicz = (x, y, m) => {\n    let val = 0.0;\n    const first = Math.sin((x * x) / Math.PI);\n    val += Math.sin(x) * Math.pow(first, 2.0 * m);\n    const second = Math.sin((2 * y * y) / Math.PI);\n    val += Math.sin(y) * Math.pow(second, 2.0 * m);\n    return -val;\n  };\n\n  return (\n    <div className='main'>\n      <div className='row'>\n        {console.log(cormickX)}\n        <h2>Select function</h2>\n        <Dropdown\n          options={options}\n          onChange={(option) => setFun(option.value)}\n          value={fun}\n          placeholder='Select function'\n        />\n      </div>\n      <div className='row'>\n        <h3>Domain</h3>\n        {fun === 'mcCormick' && (\n          <>\n            <label>\n              x1\n              <input\n                type='number'\n                value={cormickX[0]}\n                onChange={(e) => setCormickX([e.target.value, cormickX[1]])}\n              />\n              <input\n                type='number'\n                value={cormickX[1]}\n                onChange={(e) => setCormickX([cormickX[0], e.target.value])}\n              />\n            </label>\n            <label>\n              x2\n              <input\n                type='number'\n                value={cormickY[0]}\n                onChange={(e) => setCormickY([e.target.value, cormickY[0]])}\n              />\n              <input\n                type='number'\n                value={cormickY[1]}\n                onChange={(e) => setCormickY([cormickY[0], e.target.value])}\n              />\n            </label>\n            <h5>\n              Ideal fitness = <b>1</b>\n            </h5>\n          </>\n        )}\n        {fun === 'eggCrate' && (\n          <>\n            <label>\n              x1\n              <input\n                type='number'\n                value={eggX[0]}\n                onChange={(e) => setEggX([e.target.value, eggX[1]])}\n              />\n              <input\n                type='number'\n                value={eggX[1]}\n                onChange={(e) => setEggX([eggX[0], e.target.value])}\n              />\n            </label>\n            <label>\n              x2\n              <input\n                type='number'\n                value={eggY[0]}\n                onChange={(e) => setEggY([e.target.value, eggY[0]])}\n              />\n              <input\n                type='number'\n                value={eggY[1]}\n                onChange={(e) => setEggY([eggY[0], e.target.value])}\n              />\n            </label>\n            <h5>\n              Ideal fitness = <b>highest</b>\n            </h5>\n          </>\n        )}\n        {fun === 'michalewicz' && (\n          <>\n            <label>\n              x1\n              <input\n                type='number'\n                value={michalewiczX[0]}\n                onChange={(e) =>\n                  setMichalewiczX([e.target.value, michalewiczX[1]])\n                }\n              />\n              <input\n                type='number'\n                value={michalewiczX[1]}\n                onChange={(e) =>\n                  setMichalewiczX([michalewiczX[0], e.target.value])\n                }\n              />\n            </label>\n            <label>\n              x2\n              <input\n                type='number'\n                value={michalewiczY[0]}\n                onChange={(e) =>\n                  setMichalewiczY([e.target.value, michalewiczY[0]])\n                }\n              />\n              <input\n                type='number'\n                value={michalewiczY[1]}\n                onChange={(e) =>\n                  setMichalewiczY([michalewiczY[0], e.target.value])\n                }\n              />\n            </label>\n            <h5>\n              Ideal fitness = <b>1</b>\n            </h5>\n          </>\n        )}\n      </div>\n      <div className='settings'>\n        <label>\n          Mutation rate\n          <input\n            type='number'\n            value={settings.mutationRate}\n            onChange={(e) =>\n              setSettings({ ...settings, mutationRate: e.target.value })\n            }\n          />\n        </label>\n        <label>\n          Population size\n          <input\n            type='number'\n            value={settings.popSize}\n            onChange={(e) =>\n              setSettings({ ...settings, popSize: e.target.value })\n            }\n          />\n        </label>\n        <label>\n          Number of parents\n          <input\n            type='number'\n            value={settings.numParents}\n            onChange={(e) =>\n              setSettings({ ...settings, numParents: e.target.value })\n            }\n          />\n        </label>\n        <label>\n          Max generations\n          <input\n            type='number'\n            value={settings.maxGenerations}\n            onChange={(e) =>\n              setSettings({ ...settings, maxGenerations: e.target.value })\n            }\n          />\n        </label>\n        <label>\n          Elitism\n          <input\n            type='checkbox'\n            checked={settings.elitism}\n            value={settings.elitism}\n            name='elitism'\n            onChange={(e) =>\n              setSettings({ ...settings, elitism: !settings.elitism })\n            }\n          />\n        </label>\n      </div>\n      <div className='row'>\n        <button onClick={() => runAlgorithm()}>Run algorithm</button>\n      </div>\n      <ul className='results' id='results'></ul>\n    </div>\n  );\n};\n\nexport default Main;\n","import './App.css';\nimport Main from './Components/Main';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Main />\n      <footer className='App-footer'>\n        <span>Szymon Galazka 2020</span>\n        <a\n          className='App-link'\n          href='https://github.com/SzymonGalazka/gen-alg-min'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          Repository link\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}